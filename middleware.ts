import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { jwtVerify } from 'jose';

const JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production';

// ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á login
const PROTECTED_PATHS = [
  '/',        // ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏ï‡πâ‡∏≠‡∏á login
  '/dashboard',
  '/chart',
  '/blacklist',
  '/admin'
];

// ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
const ADMIN_ONLY_PATHS = [
  '/admin',
  '/blacklist'
];

// ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà manager ‡πÅ‡∏•‡∏∞ admin ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ
const MANAGER_ADMIN_PATHS = [
  '/chart'
];

// ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà user ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ
const USER_ALLOWED_PATHS = [
  '/',           // ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
  '/dashboard'   // ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
];

export async function middleware(request: NextRequest) {
  const pathname = request.nextUrl.pathname;
  
  // ‡∏Ç‡πâ‡∏≤‡∏° API routes ‡∏ó‡∏µ‡πà user ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ
  if (pathname.startsWith('/api/technicians') || 
      pathname.startsWith('/api/kpis') ||
      pathname.startsWith('/api/img') ||
      pathname.startsWith('/api/db-health') ||
      pathname.startsWith('/api/auth')) {
    console.log('üîç Middleware: Bypassing API route:', pathname);
    return NextResponse.next();
  }
  
  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const isProtectedPath = PROTECTED_PATHS.some(path => {
    if (path === '/') {
      return pathname === '/';  // ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß
    }
    return pathname.startsWith(path);
  });
  
  if (!isProtectedPath) {
    return NextResponse.next();
  }

  // ‡∏î‡∏∂‡∏á token ‡∏à‡∏≤‡∏Å cookies
  const token = request.cookies.get('auth-token')?.value;
  
  if (!token) {
    // ‡πÑ‡∏°‡πà‡∏°‡∏µ token - redirect ‡πÑ‡∏õ login
    const loginUrl = new URL('/login', request.url);
    loginUrl.searchParams.set('redirect', pathname);
    return NextResponse.redirect(loginUrl);
  }

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token ‡∏î‡πâ‡∏ß‡∏¢ jose (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Edge Runtime)
    const secret = new TextEncoder().encode(JWT_SECRET);
    const { payload } = await jwtVerify(token, secret, { algorithms: ['HS256'] });
    const userRole = (payload as any).role;

    // ‡πÄ‡∏ä‡πá‡∏Ñ role permissions
    if (ADMIN_ONLY_PATHS.some(path => pathname.startsWith(path))) {
      if (userRole !== 'admin') {
        // User/Manager ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ admin - ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
        return NextResponse.redirect(new URL('/', request.url));
      }
    }

    if (MANAGER_ADMIN_PATHS.some(path => pathname.startsWith(path))) {
      if (userRole !== 'admin' && userRole !== 'manager') {
        // User ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ chart - ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
        return NextResponse.redirect(new URL('/', request.url));
      }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á response ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° user info ‡πÉ‡∏ô headers
  const response = NextResponse.next();
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤ ASCII-safe ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ByteString ‡πÉ‡∏ô Edge runtime
  if ((payload as any).userId) response.headers.set('x-user-id', String((payload as any).userId));
  if ((payload as any).employee_id) response.headers.set('x-employee-id', String((payload as any).employee_id));
  if ((payload as any).role) response.headers.set('x-user-role', String((payload as any).role));
  // ‡∏á‡∏î‡πÉ‡∏™‡πà full_name ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞ non-ASCII ‡πÄ‡∏ä‡πà‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢

    return response;

  } catch (error) {
    // ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô middleware (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á JWT verify ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á header)
    const loginUrl = new URL('/login', request.url);
    loginUrl.searchParams.set('redirect', pathname);
    
    const response = NextResponse.redirect(loginUrl);
    response.cookies.set('auth-token', '', {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      expires: new Date(0)
    });
    
    return response;
  }
}

export const config = {
  matcher: [
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ middleware ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    '/',
    '/dashboard',
    '/dashboard/:path*',
    '/chart',
    '/chart/:path*',
    '/blacklist',
    '/blacklist/:path*',
    '/admin',
    '/admin/:path*',
    '/test-login',
    '/test-login/:path*'
  ],
}