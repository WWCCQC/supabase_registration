/**
 * ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ 18 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
 */

require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing Supabase credentials');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function findMissingRecords() {
  console.log('üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ 18 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...\n');

  try {
    // 1. ‡∏ô‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const { count: totalCount } = await supabase
      .from('technicians')
      .select('*', { count: 'exact', head: true });
    
    console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);

    // 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ö‡∏ö paginate
    console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ö‡∏ö paginate...');
    let allData = [];
    let from = 0;
    const pageSize = 1000;

    while (true) {
      const { data, error } = await supabase
        .from('technicians')
        .select('*')
        .range(from, from + pageSize - 1);
      
      if (error) throw error;
      
      if (!data || data.length === 0) break;
      
      allData = allData.concat(data);
      console.log(`   ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• batch: ${data.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏£‡∏ß‡∏°: ${allData.length}`);
      
      if (data.length < pageSize) break;
      from += pageSize;
    }

    console.log(`\n‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ: ${allData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    const missingCount = totalCount - allData.length;
    
    if (missingCount === 0) {
      console.log('‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≤‡∏¢‡πÑ‡∏õ! ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏Å‡∏ï‡∏¥\n');
      return;
    }

    console.log(`\n‚ö†Ô∏è  ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≤‡∏¢‡πÑ‡∏õ: ${missingCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);

    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤:\n');

    // 3.1 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö encoding issues
    const encodingIssues = allData.filter(row => {
      const fullName = row.full_name || '';
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏´‡∏£‡∏∑‡∏≠ emoji
      return /[\uFFFD\u200B-\u200D\uFEFF]/.test(fullName) || 
             fullName.includes('ÔøΩ');
    });
    
    if (encodingIssues.length > 0) {
      console.log(`üìù ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ encoding: ${encodingIssues.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      encodingIssues.slice(0, 5).forEach((row, idx) => {
        console.log(`   ${idx + 1}. ${row.tech_id} - ${row.full_name}`);
      });
      console.log('');
    }

    // 3.2 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
    const techIdMap = new Map();
    allData.forEach(row => {
      const techId = row.tech_id;
      if (techIdMap.has(techId)) {
        techIdMap.set(techId, techIdMap.get(techId) + 1);
      } else {
        techIdMap.set(techId, 1);
      }
    });

    const duplicates = Array.from(techIdMap.entries())
      .filter(([_, count]) => count > 1);
    
    if (duplicates.length > 0) {
      console.log(`üìù ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà tech_id ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô: ${duplicates.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      duplicates.slice(0, 5).forEach(([techId, count]) => {
        console.log(`   tech_id: ${techId} - ‡∏õ‡∏£‡∏≤‡∏Å‡∏è ${count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
      });
      console.log('');
    }

    // 3.3 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ NULL ‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    const criticalFields = ['tech_id', 'full_name', 'work_type', 'provider', 'rsm'];
    const nullIssues = {};
    
    criticalFields.forEach(field => {
      const nullCount = allData.filter(row => !row[field] || row[field] === '').length;
      if (nullCount > 0) {
        nullIssues[field] = nullCount;
      }
    });

    if (Object.keys(nullIssues).length > 0) {
      console.log('üìù ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏õ‡πá‡∏ô NULL ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á:');
      Object.entries(nullIssues).forEach(([field, count]) => {
        console.log(`   ${field}: ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      });
      console.log('');
    }

    // 4. ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£ query ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ WHERE condition
    console.log('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö query ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ WHERE condition...\n');

    // 4.1 Query ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ NULL ‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    const { count: nonNullCount } = await supabase
      .from('technicians')
      .select('*', { count: 'exact', head: true })
      .not('tech_id', 'is', null)
      .not('full_name', 'is', null)
      .not('work_type', 'is', null)
      .not('provider', 'is', null)
      .not('rsm', 'is', null);
    
    console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ NULL ‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ${nonNullCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`   ‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalCount - nonNullCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);

    // 4.2 Query ‡∏ó‡∏µ‡πà‡∏°‡∏µ work_type ‡πÅ‡∏•‡∏∞ provider
    const { count: validCount } = await supabase
      .from('technicians')
      .select('*', { count: 'exact', head: true })
      .not('work_type', 'is', null)
      .not('provider', 'is', null);
    
    console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ work_type ‡πÅ‡∏•‡∏∞ provider: ${validCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`   ‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalCount - validCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);

    // 5. ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (‡πÑ‡∏°‡πà‡∏°‡∏µ work_type ‡∏´‡∏£‡∏∑‡∏≠ provider)
    const { data: problematicData } = await supabase
      .from('technicians')
      .select('tech_id, full_name, work_type, provider, rsm, workgroup_status')
      .or('work_type.is.null,provider.is.null')
      .limit(10);
    
    if (problematicData && problematicData.length > 0) {
      console.log(`‚ö†Ô∏è  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ work_type ‡∏´‡∏£‡∏∑‡∏≠ provider (${problematicData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å):`);
      problematicData.forEach((row, idx) => {
        console.log(`\n${idx + 1}. ${row.tech_id} - ${row.full_name}`);
        console.log(`   Work Type: ${row.work_type || 'NULL'}`);
        console.log(`   Provider: ${row.provider || 'NULL'}`);
        console.log(`   RSM: ${row.rsm || 'NULL'}`);
      });
    }

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  }
}

findMissingRecords();
