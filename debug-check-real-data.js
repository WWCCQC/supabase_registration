/**
 * ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Supabase
 * ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
 */

require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing Supabase credentials');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkRealData() {
  console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Supabase...\n');

  try {
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    console.log('üìä === ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ===');
    const { count: totalCount, error: countError } = await supabase
      .from('technicians')
      .select('*', { count: 'exact', head: true });
    
    if (countError) throw countError;
    console.log(`‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);

    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏≤‡∏° work_type
    console.log('üìä === ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏≤‡∏° Work Type ===');
    const { data: workTypeData, error: workTypeError } = await supabase
      .from('technicians')
      .select('work_type')
      .not('work_type', 'is', null);
    
    if (workTypeError) throw workTypeError;
    
    const workTypeCount = {};
    workTypeData.forEach(row => {
      const type = row.work_type || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
      workTypeCount[type] = (workTypeCount[type] || 0) + 1;
    });
    
    Object.entries(workTypeCount)
      .sort((a, b) => b[1] - a[1])
      .forEach(([type, count]) => {
        const percent = ((count / totalCount) * 100).toFixed(2);
        console.log(`  ${type}: ${count} (${percent}%)`);
      });
    console.log('');

    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏≤‡∏° provider
    console.log('üìä === ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏≤‡∏° Provider ===');
    const { data: providerData, error: providerError } = await supabase
      .from('technicians')
      .select('provider')
      .not('provider', 'is', null);
    
    if (providerError) throw providerError;
    
    const providerCount = {};
    providerData.forEach(row => {
      const provider = row.provider || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
      providerCount[provider] = (providerCount[provider] || 0) + 1;
    });
    
    Object.entries(providerCount)
      .sort((a, b) => b[1] - a[1])
      .forEach(([provider, count]) => {
        const percent = ((count / totalCount) * 100).toFixed(2);
        console.log(`  ${provider}: ${count} (${percent}%)`);
      });
    console.log('');

    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏≤‡∏° RSM
    console.log('üìä === ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏≤‡∏° RSM (Top 10) ===');
    const { data: rsmData, error: rsmError } = await supabase
      .from('technicians')
      .select('rsm')
      .not('rsm', 'is', null);
    
    if (rsmError) throw rsmError;
    
    const rsmCount = {};
    rsmData.forEach(row => {
      const rsm = row.rsm || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
      rsmCount[rsm] = (rsmCount[rsm] || 0) + 1;
    });
    
    Object.entries(rsmCount)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .forEach(([rsm, count]) => {
        const percent = ((count / totalCount) * 100).toFixed(2);
        console.log(`  ${rsm}: ${count} (${percent}%)`);
      });
    console.log('');

    // 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏≤‡∏° Power Authority
    console.log('üìä === ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏≤‡∏° Power Authority ===');
    const { data: powerData, error: powerError } = await supabase
      .from('technicians')
      .select('power_authority');
    
    if (powerError) throw powerError;
    
    const powerCount = {};
    powerData.forEach(row => {
      const power = row.power_authority || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
      powerCount[power] = (powerCount[power] || 0) + 1;
    });
    
    Object.entries(powerCount)
      .sort((a, b) => b[1] - a[1])
      .forEach(([power, count]) => {
        const percent = ((count / totalCount) * 100).toFixed(2);
        console.log(`  ${power}: ${count} (${percent}%)`);
      });
    console.log('');

    // 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏≤‡∏° Workgroup Status
    console.log('üìä === ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏≤‡∏° Workgroup Status ===');
    const { data: statusData, error: statusError } = await supabase
      .from('technicians')
      .select('workgroup_status');
    
    if (statusError) throw statusError;
    
    const statusCount = {};
    statusData.forEach(row => {
      const status = row.workgroup_status || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
      statusCount[status] = (statusCount[status] || 0) + 1;
    });
    
    Object.entries(statusCount)
      .sort((a, b) => b[1] - a[1])
      .forEach(([status, count]) => {
        const percent = ((count / totalCount) * 100).toFixed(2);
        console.log(`  ${status}: ${count} (${percent}%)`);
      });
    console.log('');

    // 7. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Depot Code ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
    console.log('üìä === Depot Codes ===');
    const { data: depotData, error: depotError } = await supabase
      .from('technicians')
      .select('depot_code')
      .not('depot_code', 'is', null);
    
    if (depotError) throw depotError;
    
    const uniqueDepots = new Set(depotData.map(r => r.depot_code));
    console.log(`‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Depot Code ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô: ${uniqueDepots.size} ‡πÅ‡∏´‡πà‡∏á\n`);

    // 8. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
    console.log('üìä === ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å ===');
    const { data: sampleData, error: sampleError } = await supabase
      .from('technicians')
      .select('tech_id, full_name, work_type, provider, rsm, workgroup_status, power_authority')
      .order('tech_id', { ascending: true })
      .limit(5);
    
    if (sampleError) throw sampleError;
    
    sampleData.forEach((row, idx) => {
      console.log(`\n${idx + 1}. ${row.tech_id} - ${row.full_name}`);
      console.log(`   Work Type: ${row.work_type || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
      console.log(`   Provider: ${row.provider || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
      console.log(`   RSM: ${row.rsm || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
      console.log(`   Workgroup Status: ${row.workgroup_status || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
      console.log(`   Power Authority: ${row.power_authority || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
    });
    console.log('');

    // 9. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ NULL ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
    console.log('üìä === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢ ===');
    
    const fieldsToCheck = [
      'tech_id', 'full_name', 'work_type', 'provider', 
      'rsm', 'workgroup_status', 'power_authority', 'depot_code'
    ];
    
    for (const field of fieldsToCheck) {
      const { count: nullCount } = await supabase
        .from('technicians')
        .select('*', { count: 'exact', head: true })
        .or(`${field}.is.null,${field}.eq.`);
      
      const percent = ((nullCount / totalCount) * 100).toFixed(2);
      console.log(`  ${field}: ${nullCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (${percent}%) ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠ NULL`);
    }
    console.log('');

    // 10. ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö API endpoint
    console.log('üìä === ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API /api/kpis ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ===');
    console.log('‚ö†Ô∏è  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:');
    console.log('   http://localhost:3000/api/kpis');
    console.log('   http://localhost:3000/api/technicians?page=1&pageSize=10');
    console.log('   http://localhost:3000/api/chart/rsm-workgroup');
    console.log('');

    console.log('‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå');
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    if (error.details) console.error('   ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:', error.details);
    if (error.hint) console.error('   ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:', error.hint);
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
checkRealData();
