/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ workgroup_status ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤"
 */

require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkWorkgroupStatus() {
  console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö workgroup_status...\n');

  // 1. ‡∏ô‡∏±‡∏ö‡∏ï‡∏≤‡∏° SQL query ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô Supabase
  console.log('üìä === ‡∏ï‡∏≤‡∏° SQL Query (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö) ===');
  
  const { data: sqlResult, error: sqlError } = await supabase
    .rpc('execute_sql', {
      query: `
        SELECT 
          COUNT(*) as total_people,
          COUNT(CASE WHEN workgroup_status = '‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤' THEN 1 END) as workgroup_count,
          ROUND(100.0 * COUNT(CASE WHEN workgroup_status = '‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤' THEN 1 END) / COUNT(*), 2) as workgroup_percentage,
          NOW() as query_time
        FROM technicians
        WHERE rsm IS NOT NULL
          AND provider IS NOT NULL
          AND work_type IS NOT NULL;
      `
    });
  
  // ‡∏ñ‡πâ‡∏≤ RPC ‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ô‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
  console.log('üìä === ‡∏ô‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Supabase Client ===\n');
  
  // 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ WHERE conditions
  let allData = [];
  let from = 0;
  const pageSize = 1000;

  while (true) {
    const { data, error } = await supabase
      .from('technicians')
      .select('workgroup_status, national_id, tech_id, full_name')
      .not('rsm', 'is', null)
      .not('provider', 'is', null)
      .not('work_type', 'is', null)
      .range(from, from + pageSize - 1);
    
    if (error) throw error;
    if (!data || data.length === 0) break;
    
    allData = allData.concat(data);
    console.log(`   ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• batch: ${data.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏£‡∏ß‡∏°: ${allData.length}`);
    
    if (data.length < pageSize) break;
    from += pageSize;
  }

  console.log(`\n‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${allData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);

  // 3. ‡∏ô‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ workgroup_status ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  console.log('üìä === ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á workgroup_status ===');
  const statusCount = {};
  allData.forEach(row => {
    const status = row.workgroup_status || 'NULL';
    statusCount[status] = (statusCount[status] || 0) + 1;
  });

  Object.entries(statusCount)
    .sort((a, b) => b[1] - a[1])
    .forEach(([status, count]) => {
      console.log(`  "${status}": ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    });

  console.log('');

  // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "‡∏´"
  console.log('üìä === ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "‡∏´" ===');
  const startsWithH = allData.filter(row => {
    const status = row.workgroup_status || '';
    return status.startsWith('‡∏´');
  });
  console.log(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${startsWithH.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);

  // 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤" ‡πÅ‡∏ö‡∏ö exact match
  console.log('üìä === Exact match ‡∏Å‡∏±‡∏ö "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤" ===');
  const exactMatch = allData.filter(row => row.workgroup_status === '‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤');
  console.log(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${exactMatch.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);

  // 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö encoding issues
  console.log('üìä === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Encoding Issues ===');
  const encodingIssues = allData.filter(row => {
    const status = row.workgroup_status || '';
    return status.includes('‡∏´‡∏±‡∏ß‡∏´‡∏ô') && status !== '‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤';
  });
  
  if (encodingIssues.length > 0) {
    console.log(`‚ö†Ô∏è  ‡∏û‡∏ö encoding issues: ${encodingIssues.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    encodingIssues.slice(0, 5).forEach((row, idx) => {
      console.log(`   ${idx + 1}. status="${row.workgroup_status}" (${row.tech_id} - ${row.full_name})`);
      // ‡πÅ‡∏™‡∏î‡∏á hex code
      const hex = Buffer.from(row.workgroup_status, 'utf8').toString('hex');
      console.log(`      Hex: ${hex}`);
    });
  } else {
    console.log('‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö encoding issues');
  }
  console.log('');

  // 7. ‡∏ô‡∏±‡∏ö unique national_id ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤
  console.log('üìä === ‡∏ô‡∏±‡∏ö Unique National ID ===');
  const uniqueHeads = new Set();
  exactMatch.forEach(row => {
    const nationalId = row.national_id || '';
    if (nationalId && nationalId !== 'null' && nationalId !== 'undefined') {
      uniqueHeads.add(nationalId);
    }
  });
  console.log(`Unique national_id (‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤): ${uniqueHeads.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);

  // 8. ‡∏™‡∏£‡∏∏‡∏õ
  console.log('üìä === ‡∏™‡∏£‡∏∏‡∏õ ===');
  console.log(`‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏°‡∏µ rsm, provider, work_type): ${allData.length}`);
  console.log(`workgroup_status = "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤" (exact): ${exactMatch.length}`);
  console.log(`workgroup_status ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "‡∏´": ${startsWithH.length}`);
  console.log(`Unique national_id (‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤): ${uniqueHeads.size}`);
  console.log('');
  console.log('‚ö†Ô∏è  ‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ: 1787 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
  console.log(`üìä ‡∏ï‡∏≤‡∏° API ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πâ: 1367 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏ï‡∏≤‡∏° console log)`);
  console.log(`‚ùå ‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô: ${1787 - uniqueHeads.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
}

checkWorkgroupStatus();
