import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import jwt from 'jsonwebtoken';
import { cookies } from 'next/headers';

// Supabase Client (Admin)
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
);

const JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { employee_id, password } = body;

    if (!employee_id || !password) {
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' }, 
        { status: 400 }
      );
    }

    console.log('üîê Login attempt for employee_id:', employee_id);

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ bcrypt ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô plain text)
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('employee_id', employee_id)
      .eq('is_active', true)
      .single();

    if (userError || !user) {
      console.log('‚ùå User not found:', userError?.message);
      return NextResponse.json(
        { error: '‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' }, 
        { status: 401 }
      );
    }

    // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (plain text)
    if (user.password !== password) {
      console.log('‚ùå Password mismatch for user:', employee_id);
      return NextResponse.json(
        { error: '‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' }, 
        { status: 401 }
      );
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï last_login
    await supabase
      .from('users')
      .update({ last_login: new Date().toISOString() })
      .eq('id', user.id);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token
    const token = jwt.sign(
      { 
        userId: user.id,
        employee_id: user.employee_id,
        role: user.role,
        full_name: user.full_name
      },
      JWT_SECRET,
      { expiresIn: '24h' }
    );

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Activity Log
    const clientIP = request.headers.get('x-forwarded-for') || 
                     request.headers.get('x-real-ip') ||
                     'unknown';
    const userAgent = request.headers.get('user-agent') || 'unknown';

    await supabase
      .from('activity_logs')
      .insert({
        user_id: user.id,
        employee_id: user.employee_id,
        action: 'LOGIN',
        details: {
          login_time: new Date().toISOString(),
          user_agent: userAgent
        },
        ip_address: clientIP,
        user_agent: userAgent,
        session_id: token.substring(0, 16) // ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á token ‡πÄ‡∏õ‡πá‡∏ô session_id
      });

    console.log('‚úÖ Login successful for:', user.employee_id);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Response ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á Cookie
    const response = NextResponse.json({
      success: true,
      message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      user: {
        id: user.id,
        employee_id: user.employee_id,
        full_name: user.full_name,
        email: user.email,
        role: user.role,
        last_login: user.last_login
      }
    });

    // ‡∏ï‡∏±‡πâ‡∏á JWT Token ‡πÄ‡∏õ‡πá‡∏ô Cookie (Session Cookie - ‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î browser)
    response.cookies.set('auth-token', token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax'
      // ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà maxAge ‡∏´‡∏£‡∏∑‡∏≠ expires ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô session cookie
    });

    return response;

  } catch (error) {
    console.error('üí• Login error:', error);
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' }, 
      { status: 500 }
    );
  }
}