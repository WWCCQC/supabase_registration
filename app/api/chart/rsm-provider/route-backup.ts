export const dynamic = "force-dynamic";
import { NextResponse } from "next/server";
import { supabaseAdmin } from "@/lib/supabase-admin";

export async function GET() {
  try {
    const supabase = supabaseAdmin();
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Technicians API ‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£
    // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Supabase Table Editor (2,971 records)
    
    // ‡πÉ‡∏ä‡πâ column selection ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Technicians API
    const cols = [
      "national_id","tech_id","full_name","gender","age","degree",
      "doc_tech_card_url","phone","email","workgroup_status","work_type",
      "provider","area","rsm","ctm","depot_code","depot_name","province"
    ] as const;
    
    // 1. Query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Technicians API ‡πÄ‡∏õ‡πä‡∏∞)
    let countQuery = supabase.from("technicians").select("*", { count: "exact", head: true });
    const { count: totalCount, error: countError } = await countQuery;
    
    if (countError) {
      console.error("Chart count error:", countError);
      return NextResponse.json({ error: countError.message }, { status: 400 });
    }
    
    // 2. Query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Technicians API)
    let allData: any[] = [];
    let from = 0;
    const pageSize = 1000;
    let hasMore = true;
    
    while (hasMore) {
      let dataQuery = supabase.from("technicians").select("rsm, workgroup_status");
      dataQuery = dataQuery.order("national_id", { ascending: true, nullsFirst: true }).range(from, from + pageSize - 1);
      
      const { data, error } = await dataQuery;
      
      if (error) {
        console.error("Chart data fetch error:", error);
        return NextResponse.json({ error: error.message }, { status: 400 });
      }
      
      if (data && data.length > 0) {
        allData = [...allData, ...data];
        from += pageSize;
        hasMore = data.length === pageSize;
      } else {
        hasMore = false;
      }
    }
    
    console.log(`üìä Chart API: Fetched ${allData?.length || 0} records from database (DB count: ${totalCount || 0})`);
    console.log(`üìä Chart API: Using actual fetched count (${allData?.length || 0}) for consistency with Table Editor`);

    if (!allData || allData.length === 0) {
      return NextResponse.json({ 
        chartData: [], 
        summary: {
          totalRsm: 0,
          totalTechnicians: 0,
          totalTechniciansWithRsm: 0,
          totalLeaders: 0,
          totalMembers: 0,
          recordsWithoutRsm: 0,
          recordsWithoutStatus: 0
        }
      });
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° RSM ‡πÅ‡∏•‡∏∞ workgroup_status
    const groupedData: Record<string, { ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤: number; ‡∏•‡∏π‡∏Å‡∏ô‡πâ‡∏≠‡∏á: number }> = {};
    
    // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡πÉ‡∏ä‡πâ totalCount ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Supabase Table Editor
    let totalRecords = totalCount || 0;
    let recordsWithRsm = 0;
    let recordsWithoutRsm = 0;
    let recordsWithStatus = 0;
    let recordsWithoutStatus = 0;
    
    allData.forEach((row: any) => {
      const rsm = String(row.rsm || "").trim();
      const status = String(row.workgroup_status || "").toLowerCase().trim();
      
      // ‡∏ô‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ/‡πÑ‡∏°‡πà‡∏°‡∏µ RSM
      if (rsm) {
        recordsWithRsm++;
      } else {
        recordsWithoutRsm++;
      }
      
      // ‡∏ô‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ/‡πÑ‡∏°‡πà‡∏°‡∏µ workgroup_status
      if (status) {
        recordsWithStatus++;
      } else {
        recordsWithoutStatus++;
      }
      
      if (!rsm) return; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ RSM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
      
      if (!groupedData[rsm]) {
        groupedData[rsm] = { ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤: 0, ‡∏•‡∏π‡∏Å‡∏ô‡πâ‡∏≠‡∏á: 0 };
      }
      
      // ‡πÅ‡∏õ‡∏•‡∏á workgroup_status ‡πÄ‡∏õ‡πá‡∏ô ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤/‡∏•‡∏π‡∏Å‡∏ô‡πâ‡∏≠‡∏á
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤
      if (status.includes("‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤") || 
          status.includes("leader") || 
          status === "l" || 
          status === "‡∏´‡∏ô." ||
          status.includes("head")) {
        groupedData[rsm].‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤++;
      } else if (status) {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ status ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤ = ‡∏•‡∏π‡∏Å‡∏ô‡πâ‡∏≠‡∏á
        groupedData[rsm].‡∏•‡∏π‡∏Å‡∏ô‡πâ‡∏≠‡∏á++;
      }
    });

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array format ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Recharts
    const chartData = Object.entries(groupedData)
      .map(([rsm, counts]) => ({
        rsm,
        ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤: counts.‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤,
        ‡∏•‡∏π‡∏Å‡∏ô‡πâ‡∏≠‡∏á: counts.‡∏•‡∏π‡∏Å‡∏ô‡πâ‡∏≠‡∏á,
        total: counts.‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤ + counts.‡∏•‡∏π‡∏Å‡∏ô‡πâ‡∏≠‡∏á
      }))
      .sort((a, b) => b.total - a.total) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° total ‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
      .slice(0, 20); // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà top 20 RSM
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì summary ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const allTotals = Object.values(groupedData);
    const totalLeaders = allTotals.reduce((sum, item) => sum + item.‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤, 0);
    const totalMembers = allTotals.reduce((sum, item) => sum + item.‡∏•‡∏π‡∏Å‡∏ô‡πâ‡∏≠‡∏á, 0);
    const totalTechniciansWithRsm = totalLeaders + totalMembers;
    
    console.log(`üìä Chart Summary: Total Records: ${totalRecords}, Records with RSM: ${recordsWithRsm}, Records without RSM: ${recordsWithoutRsm}`);
    console.log(`üìä Chart Summary: Records with Status: ${recordsWithStatus}, Records without Status: ${recordsWithoutStatus}`);
    console.log(`üìä Chart Summary: Total RSM: ${Object.keys(groupedData).length}, Total Technicians with RSM: ${totalTechniciansWithRsm}, Leaders: ${totalLeaders}, Members: ${totalMembers}`);

    return NextResponse.json(
      { 
        chartData,
        summary: {
          totalRsm: Object.keys(groupedData).length,           // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô RSM ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          totalTechnicians: totalRecords,                      // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ RSM)
          totalTechniciansWithRsm: totalTechniciansWithRsm,    // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ RSM
          totalLeaders: totalLeaders,                          // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          totalMembers: totalMembers,                          // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏ô‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          recordsWithoutRsm: recordsWithoutRsm,                // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ RSM
          recordsWithoutStatus: recordsWithoutStatus           // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ workgroup_status
        }
      },
      {
        headers: {
          "cache-control": "no-store, no-cache, must-revalidate",
          "pragma": "no-cache",
          "expires": "0",
        },
      }
    );
  } catch (e: any) {
    console.error("Chart API error:", e);
    return NextResponse.json(
      { error: e?.message ?? "Unknown error" },
      { status: 500 }
    );
  }
}
